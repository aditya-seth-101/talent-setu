#!/usr/bin/env tsx
import { connectMongo, disconnectMongo, getCollection } from '../backend/api/src/services/database.js';
import '../backend/api/src/config/env.js';

async function main(){
  await connectMongo();
  const techColl = getCollection('technologies');
  const coursesColl = getCollection('courses');
  const topicsColl = getCollection('topics');
  const challengesColl = getCollection('challenges');

  let jsTech = await techColl.findOne({ slug: 'javascript' });
  if (!jsTech) {
    jsTech = await techColl.findOne({});
    if (!jsTech) throw new Error('no technologies found in DB');
  }
  console.log('jsTech:', JSON.stringify(jsTech));

  const now = new Date();
  const courseSlug = 'intro-to-javascript';

  // upsert course (replaceOne)
  const courseDoc = {
    slug: courseSlug,
    title: 'Introduction to JavaScript',
    languageId: jsTech._id,
    languageKey: jsTech.judge0_language_key ?? 'javascript',
    description: 'A short beginner-friendly course covering JS fundamentals.',
    levels: [{ name: 'Beginner', topicIds: [] }],
    autoGenerated: false,
    status: 'published',
    createdAt: now,
    updatedAt: now,
    publishedAt: now,
  } as any;

  const courseRes = await coursesColl.findOneAndUpdate(
    { slug: courseSlug },
    { $set: courseDoc },
    { upsert: true, returnDocument: 'after' }
  );
  const course = courseRes.value!;

  const topicSlug = 'basics-console-and-types';
  const topicDoc = {
    courseId: course._id,
    title: 'Console, Types, and Basic Syntax',
    slug: topicSlug,
    description: "Learn console logging, primitive types, and basic syntax in JavaScript.",
    youtubeLink: 'https://www.youtube.com/results?search_query=javascript+basics',
    prerequisites: [],
    level: 'Beginner',
    editorTemplate: "console.log('Hello, JS!')",
    challengeIds: [],
    createdAt: now,
    updatedAt: now,
  } as any;

  const topicRes = await topicsColl.findOneAndUpdate(
    { slug: topicSlug, courseId: course._id },
    { $set: topicDoc },
    { upsert: true, returnDocument: 'after' }
  );
  const topic = topicRes.value!;

  const chPrompt = 'Write a function greet(name) that returns `Hello, ${name}!`. Log the result for "World" to stdout.';
  const chDoc = {
    topicId: topic._id,
    type: 'coding',
    difficulty: 'beginner',
    prompt: chPrompt,
    judge0Spec: { languageId: 63, stdin: '', expectedOutput: 'Hello, World!\n' },
    hints: [
      'Define a function named greet that accepts one parameter.',
      "Use console.log to print the returned value from greet('World').",
    ],
    createdAt: now,
    updatedAt: now,
  } as any;

  const chRes = await challengesColl.findOneAndUpdate(
    { topicId: topic._id, prompt: chPrompt },
    { $set: chDoc },
    { upsert: true, returnDocument: 'after' }
  );
  const challenge = chRes.value!;

  // ensure challengeId is linked in topic
  await topicsColl.updateOne(
    { _id: topic._id },
    { $addToSet: { challengeIds: challenge._id }, $set: { updatedAt: new Date() } }
  );

  // ensure topicId is in course.levels Beginner
  await coursesColl.updateOne(
    { _id: course._id, 'levels.name': 'Beginner' },
    { $addToSet: { 'levels.$.topicIds': topic._id }, $set: { updatedAt: new Date() } }
  );

  console.log('Sample course/topic/challenge ensured');
  await disconnectMongo();
}

main().catch(err => { console.error(err); process.exit(1); });
