export type Role = "student" | "recruiter" | "admin" | "proctor";

export interface PublicUser {
  id: string;
  email: string;
  roles: Role[];
  emailVerified: boolean;
  createdAt: string;
  lastLoginAt?: string;
}

export interface PublicProfile {
  id: string;
  userId: string;
  displayName: string;
  headline?: string | null;
  location?: string | null;
  experienceYears?: number | null;
  technologies: string[];
  resumeUrl?: string | null;
  availability?: "open" | "interviewing" | "unavailable" | null;
  learningProgress: Record<string, unknown>;
  recruitmentScore?: number | null;
  createdAt: string;
  updatedAt: string;
}

export interface TokenPair {
  accessToken: string;
  refreshToken: string;
}

export interface AuthTokensResponse {
  tokens: TokenPair;
}

export interface LoginResponse extends AuthTokensResponse {
  user: PublicUser;
  profile?: PublicProfile;
  emailVerificationRequired?: boolean;
}

export interface SignupResponse extends AuthTokensResponse {
  user: PublicUser;
  profile?: PublicProfile;
  emailVerificationSent: boolean;
}

export interface CurrentUserResponse {
  user: PublicUser;
  profile: PublicProfile;
}

export interface PublicRole {
  id: string;
  slug: Role;
  name: string;
  description: string | null;
  assignable: boolean;
}

export type ProgressStatus =
  | "locked"
  | "unlocked"
  | "in-progress"
  | "completed";

export interface PublicChallenge {
  id: string;
  topicId: string;
  type: "mcq" | "coding" | "debug";
  difficulty: "beginner" | "intermediate" | "advanced";
  prompt: string;
  judge0Spec?: {
    languageId: number;
    stdin?: string;
    expectedOutput?: string;
    additionalFiles?: string[];
    execution?: {
      timeLimitMs?: number;
      memoryLimitKb?: number;
    };
  };
  mcq?: {
    question: string;
    options: string[];
  };
  debugContext?: {
    buggySnippet: string;
    guidance?: string;
  };
  hints: string[];
  solutionHash?: string;
  randomizeSeed?: string;
}

export interface PublicTopicSummary {
  id: string;
  courseId: string;
  title: string;
  level: string;
  description: string;
  youtubeLink?: string;
  challengeCount: number;
}

export interface PublicTopicDetail {
  id: string;
  courseId: string;
  title: string;
  level: string;
  description: string;
  youtubeLink?: string;
  prerequisites: string[];
  editorTemplate?: string;
  challenges: PublicChallenge[];
}

export interface PublicCourseSummary {
  id: string;
  slug: string;
  title: string;
  languageKey: string;
  languageId: string;
  description?: string;
  levels: Array<{
    name: string;
    topicCount: number;
  }>;
  autoGenerated: boolean;
  status: "draft" | "published";
  createdAt: string;
  publishedAt?: string;
}

export interface PublicCourseDetail extends PublicCourseSummary {
  topics: PublicTopicSummary[];
}

export interface TopicProgressView {
  status: ProgressStatus;
  unlockedAt?: string;
  completedAt?: string;
  attempts: number;
  hintsUsed: number;
  hintPenalty: number;
  remainingHints: number;
  lastAttemptAt?: string;
  lockedReason?: string;
  gateChallengeId?: string;
}

export interface LevelProgressView {
  name: string;
  status: ProgressStatus;
  unlockedAt?: string;
  completedAt?: string;
  topics: Array<{
    summary: PublicTopicSummary;
    progress: TopicProgressView;
  }>;
}

export interface LearningTotals {
  baseXp: number;
  hintPenalty: number;
  netXp: number;
  completedTopics: number;
}

export interface CourseLearningView {
  course: PublicCourseSummary;
  levels: LevelProgressView[];
  totals: LearningTotals;
}

export interface TopicLearningView {
  course: PublicCourseSummary;
  topic: PublicTopicDetail;
  gateChallengeId?: string;
  gateChallenge?: PublicChallenge;
  progress: TopicProgressView;
  prerequisites: Array<{
    id: string;
    title: string;
    status: ProgressStatus;
  }>;
  hintPolicy: {
    maxPerChallenge: number;
    cooldownSeconds: number;
    penaltyPerStatic: number;
    penaltyPerAi: number;
  };
}

export interface HintResponse {
  hint: string;
  source: "static" | "ai";
  followUps: string[];
  penaltyApplied: number;
  remainingHints: number;
  progress: {
    hintsUsed: number;
    hintPenalty: number;
    netXp: number;
  };
}

export interface LeaderboardEntry {
  profileId: string;
  displayName: string;
  netXp: number;
  baseXp: number;
  hintPenalty: number;
  completedTopics: number;
  updatedAt: string;
}

export interface LeaderboardResponse {
  leaders: LeaderboardEntry[];
  updatedAt: string;
}

export interface ListCoursesResponse {
  courses: PublicCourseSummary[];
}
