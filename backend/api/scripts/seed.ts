import {
  connectMongo,
  disconnectMongo,
  getCollection,
} from "../src/services/database.js";
import "../src/config/env.js";
import type { Role } from "../src/middleware/rbac.js";

interface TechnologySeed {
  name: string;
  slug: string;
  judge0_language_key: string;
  judge0_language_id: number;
  aliases: string[];
  levels: string[];
}

interface RoleSeed {
  slug: Role;
  name: string;
  description: string;
  assignable: boolean;
  permissions: string[];
}

const technologies: TechnologySeed[] = [
  {
    name: "JavaScript",
    slug: "javascript",
    judge0_language_key: "javascript",
    judge0_language_id: 63,
    aliases: ["js", "node"],
    levels: ["beginner", "intermediate", "advanced"],
  },
  {
    name: "Python",
    slug: "python",
    judge0_language_key: "python3",
    judge0_language_id: 71,
    aliases: ["py"],
    levels: ["beginner", "intermediate", "advanced"],
  },
  {
    name: "TypeScript",
    slug: "typescript",
    judge0_language_key: "typescript",
    judge0_language_id: 74,
    aliases: ["ts"],
    levels: ["beginner", "intermediate"],
  },
];

async function main() {
  await connectMongo();
  const collection = getCollection<
    TechnologySeed & { createdAt: Date; updatedAt: Date }
  >("technologies");

  for (const tech of technologies) {
    await collection.updateOne(
      { slug: tech.slug },
      {
        $setOnInsert: {
          ...tech,
          createdAt: new Date(),
        },
        $set: {
          aliases: tech.aliases,
          judge0_language_key: tech.judge0_language_key,
          judge0_language_id: tech.judge0_language_id,
          levels: tech.levels,
          updatedAt: new Date(),
        },
      },
      { upsert: true }
    );
  }

  const rolesCollection = getCollection<
    RoleSeed & { createdAt: Date; updatedAt: Date }
  >("roles");

  const roles: RoleSeed[] = [
    {
      slug: "student",
      name: "Student",
      description:
        "Learners exploring courses, exercises, and assessments on the platform",
      assignable: true,
      permissions: ["courses.enroll", "profiles.self"],
    },
    {
      slug: "recruiter",
      name: "Recruiter",
      description:
        "Talent partners who create assessments and review candidate progress",
      assignable: true,
      permissions: ["assessments.manage", "profiles.search", "profiles.view"],
    },
    {
      slug: "proctor",
      name: "Proctor",
      description:
        "Trusted users who invigilate high-stakes assessments and kiosks",
      assignable: false,
      permissions: [
        "assessments.proctor",
        "assessments.verify",
        "profiles.view",
      ],
    },
    {
      slug: "admin",
      name: "Administrator",
      description:
        "Platform staff who manage technologies, users, assessments, and analytics",
      assignable: false,
      permissions: [
        "admin.manage",
        "technologies.manage",
        "users.manage",
        "assessments.manage",
      ],
    },
  ];

  for (const role of roles) {
    await rolesCollection.updateOne(
      { slug: role.slug },
      {
        $setOnInsert: {
          createdAt: new Date(),
        },
        $set: {
          name: role.name,
          description: role.description,
          assignable: role.assignable,
          permissions: role.permissions,
          updatedAt: new Date(),
        },
      },
      { upsert: true }
    );
  }

  // --- Sample course / topic / challenge seed for Sprint 2 dev
  const coursesColl = getCollection("courses");
  const topicsColl = getCollection("topics");
  const challengesColl = getCollection("challenges");

  // Ensure there's a sample course for JavaScript
  const jsTech = await getCollection("technologies").findOne({
    slug: "javascript",
  });
  if (jsTech) {
    const now = new Date();
    const courseSlug = "intro-to-javascript";
    const existingCourse = await coursesColl.findOne({ slug: courseSlug });

    let courseId;
    if (!existingCourse) {
      const courseResult = await coursesColl.insertOne({
        slug: courseSlug,
        title: "Introduction to JavaScript",
        languageId: jsTech._id,
        languageKey: jsTech.judge0_language_key ?? "javascript",
        description:
          "A short beginner-friendly course covering JS fundamentals.",
        levels: [{ name: "Beginner", topicIds: [] }],
        autoGenerated: false,
        status: "published",
        createdAt: now,
        updatedAt: now,
        publishedAt: now,
      });
      courseId = courseResult.insertedId;
    } else {
      courseId = existingCourse._id;
    }

    // Create a sample topic
    const topicSlug = "basics-console-and-types";
    const existingTopic = await topicsColl.findOne({
      slug: topicSlug,
      courseId,
    });
    let topicId;
    if (!existingTopic) {
      const topicResult = await topicsColl.insertOne({
        courseId,
        title: "Console, Types, and Basic Syntax",
        slug: topicSlug,
        description:
          "Learn console logging, primitive types, and basic syntax in JavaScript.",
        youtubeLink:
          "https://www.youtube.com/results?search_query=javascript+basics",
        prerequisites: [],
        level: "Beginner",
        editorTemplate: "console.log('Hello, JS!')",
        challengeIds: [],
        createdAt: now,
        updatedAt: now,
      });
      topicId = topicResult.insertedId;
    } else {
      topicId = existingTopic._id;
    }

    // Create a sample coding challenge
    const existingChallenge = await challengesColl.findOne({
      topicId,
      prompt: /console\.log/,
    });
    if (!existingChallenge) {
      const ch = {
        topicId,
        type: "coding",
        difficulty: "beginner",
        prompt:
          "Write a function greet(name) that returns `Hello, ${name}!`. Log the result for 'World' to stdout.",
        judge0Spec: {
          languageId: 63,
          stdin: "",
          expectedOutput: "Hello, World!\n",
        },
        hints: [
          "Define a function named greet that accepts one parameter.",
          "Use console.log to print the returned value from greet('World').",
        ],
        createdAt: now,
        updatedAt: now,
      } as any;

      const chRes = await challengesColl.insertOne(ch);
      // link challenge to topic and course level
      await topicsColl.updateOne(
        { _id: topicId },
        { $addToSet: { challengeIds: chRes.insertedId } }
      );
      await coursesColl.updateOne(
        { _id: courseId, "levels.name": "Beginner" },
        { $addToSet: { "levels.$.topicIds": topicId } }
      );
    }
  }
}

main()
  .then(() => {
    console.log("Seed data applied successfully");
  })
  .catch((error) => {
    console.error("Seed failed", error);
    process.exitCode = 1;
  })
  .finally(async () => {
    await disconnectMongo();
  });
