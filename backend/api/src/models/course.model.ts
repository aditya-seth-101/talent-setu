import type { ObjectId } from "mongodb";
import type { PublicTopicSummary, TopicDocument } from "./topic.model.js";

export type CourseStatus = "draft" | "published";

export interface CourseLevel {
  name: string;
  topicIds: ObjectId[];
}

export interface CourseDocument {
  _id: ObjectId;
  slug: string;
  title: string;
  languageId: ObjectId;
  languageKey: string;
  description?: string;
  levels: CourseLevel[];
  autoGenerated: boolean;
  meta?: Record<string, unknown>;
  status: CourseStatus;
  createdAt: Date;
  updatedAt: Date;
  publishedAt?: Date;
}

export interface CreateCourseInput {
  slug: string;
  title: string;
  languageId: ObjectId;
  languageKey: string;
  description?: string;
  levels?: CourseLevel[];
  autoGenerated?: boolean;
  meta?: Record<string, unknown>;
  status?: CourseStatus;
  publishedAt?: Date;
}

export interface UpdateCourseInput {
  title?: string;
  description?: string | null;
  levels?: CourseLevel[];
  languageKey?: string;
  autoGenerated?: boolean;
  meta?: Record<string, unknown>;
  status?: CourseStatus;
  publishedAt?: Date | null;
}

export type PublicCourseSummary = {
  id: string;
  slug: string;
  title: string;
  languageKey: string;
  languageId: string;
  description?: string;
  levels: {
    name: string;
    topicCount: number;
  }[];
  autoGenerated: boolean;
  status: CourseStatus;
  createdAt: string;
  publishedAt?: string;
};

export type PublicCourseDetail = PublicCourseSummary & {
  topics: PublicTopicSummary[];
};

export function mapCourseToSummary(
  course: CourseDocument,
  topics: TopicDocument[]
): PublicCourseSummary {
  const topicsById = new Map<string, TopicDocument>();
  for (const topic of topics) {
    topicsById.set(topic._id.toHexString(), topic);
  }

  return {
    id: course._id.toHexString(),
    slug: course.slug,
    title: course.title,
    languageKey: course.languageKey,
    languageId: course.languageId.toHexString(),
    description: course.description,
    levels: course.levels.map((level) => ({
      name: level.name,
      topicCount: level.topicIds.reduce((count, id) => {
        return count + (topicsById.has(id.toHexString()) ? 1 : 0);
      }, 0),
    })),
    autoGenerated: course.autoGenerated,
    status: course.status,
    createdAt: course.createdAt.toISOString(),
    publishedAt: course.publishedAt?.toISOString(),
  };
}

export function mapCourseToDetail(
  summary: PublicCourseSummary,
  topics: PublicTopicSummary[]
): PublicCourseDetail {
  return {
    ...summary,
    topics,
  };
}
