import type { NextFunction, Request, Response } from "express";
import { z } from "zod";
import * as courseRepo from "../repositories/course.repository.js";
import * as topicRepo from "../repositories/topic.repository.js";
import { ObjectId } from "mongodb";

const createCourseSchema = z.object({
  slug: z.string().min(1),
  title: z.string().min(1),
  languageKey: z.string().min(1),
  description: z.string().optional(),
});

const createTopicSchema = z.object({
  courseId: z.string().length(24),
  title: z.string().min(1),
  slug: z.string().min(1),
  description: z.string().min(1),
  level: z.string().min(1),
});

const createChallengeSchema = z.object({
  topicId: z.string().length(24),
  type: z.enum(["coding", "mcq", "debug"]).default("coding"),
  difficulty: z
    .enum(["beginner", "intermediate", "advanced"])
    .default("beginner"),
  prompt: z.string().min(1),
  judge0Spec: z
    .object({
      languageId: z.number().int().positive(),
      stdin: z.string().optional(),
      expectedOutput: z.string().optional(),
    })
    .optional(),
});

export async function createCourse(
  req: Request,
  res: Response,
  next: NextFunction
) {
  try {
    const body = createCourseSchema.parse(req.body);
    const created = await courseRepo.createCourse({
      slug: body.slug,
      title: body.title,
      languageId: new (await import("mongodb")).ObjectId(),
      languageKey: body.languageKey,
      description: body.description,
      levels: [],
      autoGenerated: false,
      status: "draft",
    });
    res.status(201).json({ course: created });
  } catch (err) {
    next(err);
  }
}

export async function createTopic(
  req: Request,
  res: Response,
  next: NextFunction
) {
  try {
    const body = createTopicSchema.parse(req.body);
    const topic = await topicRepo.createTopic({
      courseId: new (await import("mongodb")).ObjectId(body.courseId),
      title: body.title,
      slug: body.slug,
      description: body.description,
      level: body.level,
    });

    res.status(201).json({ topic });
  } catch (err) {
    next(err);
  }
}

export async function createChallenge(
  req: Request,
  res: Response,
  next: NextFunction
) {
  try {
    const body = createChallengeSchema.parse(req.body);
    const challengeRepo = await import(
      "../repositories/challenge.repository.js"
    );

    const challenge = await challengeRepo.createChallenge({
      topicId: new ObjectId(body.topicId),
      type: body.type,
      difficulty: body.difficulty,
      prompt: body.prompt,
      judge0Spec: body.judge0Spec,
    });

    // add challenge id to topic
    const topicRepository = await import("../repositories/topic.repository.js");
    await topicRepository.updateTopicById(challenge.topicId, {
      challengeIds: [challenge._id],
    });

    res.status(201).json({ challenge });
  } catch (err) {
    next(err);
  }
}
